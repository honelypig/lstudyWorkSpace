1）它需要作为Client去连接注册中心和监控中心，这个有一个NettyClient就可以了，毕竟对这边的性能要求不是很高

2）需要有两个NettyServer，都是等待消息消费者的连接，一个做普通服务用，另一个做VIP服务用，做个约定默认的VIP提供的端口是普通端口-2

3) 再说ProviderRegistryController和ProviderRPCController，因为我们知道Provider的主要功能就是分2块，
一个是注册服务，一个是提供服务，所以将这两块代码写在单独的两个模块里，方便代码的管理和业务模块化，不至于代码很乱很脏

4）两个ExcutorService线程执行器就不做介绍了，这边可能后面需要优化

5）publishRemotingTransporters这个就是需要发送给注册中心的编织好的服务类

6）globalPublishService是一个Map，放在这边方便给监控中心和其他功能的使用

7）registryAddress注册中心的地址，需要用户提供

8）exposePort本地暴露的端口

9）监控中心的地址，也需要用户提供，当然不是一定需要的

10）要提供的服务obj,这是强依赖的，这太重要了，没他就没得玩了~

11）ProvierStateIsHealthy 服务提供者的状态信息，因为假如注册中心宕机重启之后，可能之前注册的信息就丢失了，所以需要重新注册，这时候的服务状态就是不健康的

12)scheduledExecutorService 定时任务执行器，做一些定时校验的活动和操作。比如定时检查监控中心的是否健康，定时发送一些统计的数据给监控中心，
定时重发那些发给注册中心失败的注册信息

接下来的所有provider的所有的代码都将围绕着这边的几个全局变量展开的，完成的功能也就是上面的Provider接口需要实现的功能的~