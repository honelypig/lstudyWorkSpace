1、RPC架构：
	RPC是指远程过程调用，也就是说两台服务器A，B，一个应用部署在A服务器上，想要调用B服务器上应用提供的函数/方法，
	由于不在一个内存空间，不能直接调用，需要通过网络来表达调用的语义和传达调用的数据。
2、一个简单的rpc架构，至少要包含Registry注册中心、Provider提供者、Consumer消费者 、Monitor监控者
	1）Registry注册中心
	   简述：
	    ①注册中心可以有多个，都是无状态的，每个注册中心之间信息不交互
	    ②从网络的角度来说，它都是server端，它不需要主动地连接其他的任何实例，只需要像一个地主一样等待别人来连接
	    ③消费者随机选择注册中心集群中的任何实例建立长连接，提供者与注册中心中的每一个实例都建立长连接
	   职责(与其说职责，还不如说代码要实现的功能)：
	   ①接收服务提供者的服务注册信息，接收到信息之后，发送ACK信息给服务提供者，否则服务提供者重新发送注册信息
	   ②接收消费者的订阅信息，并把它订阅的结果返回给消费者
	   ③如果注册信息变更，会主动通知订阅变更信息的消费者，注册信息的变更包括服务提供者下线，服务被人工降级，或者服务提供者的地址变更
	   ④持久化一些服务信息，例如某些服务管理员审核过了，则该服务重新注册后则不需要再审核，再例如，某个服务负载均衡的策略被管理员设置为轮询，那么下次它在注册的时候，则就是轮询，而不是默认的负载策略
	2）Provider提供者
	   简述：
	   ①提供者是一个精神分裂的病人，它在网络上（可以更加明确地说是站在Netty的角度上）饰演两个角色：
	        1）一是它是客户端，需要去连接Registry，发送注册信息，它也需要去连接monitor端，去发送一些调用的统计信息
	        2）二是它也是服务端，需要作为server端等待Consumer去连接，连接成功后调用服务
	   职责：
	  ①将自己的信息，提供的接口信息编织成注册信息发送给registry端
	  ②能够动态去调自己的方法，可以通过反射，cglib等一些方法去调用自己提供的那些方法
	  ③提供服务降级等服务，如果当某些服务调用的失败率高于限定值的时候，可以有一个对应的mock方法，提供降级服务
	  ④限流服务，限流的方式有很多种，也有很多实现方式，最简单的就是控制调用次数，比如100w次，其实简单的就是控制单位时间的调用次数，防止业务洪流冲垮服务
	  ⑤统计活动，将一些调用信息统计好发送给Monitor端
	3)Consumer消费者 
	  简述
	  ①它也是有两个网络角色，不过并不是精神分裂，它都是作为网络的客户端存在，一它需要去连接registry去获取到订阅信息，二是它需要主动去连接provider端去调用服务
	  职责
	  ①去向Registry端订阅服务，拿到registry端返回的结果，这个结果也就是provider的网络地址，先建立TCP的长连接，可能是多个地址，因为提供某个服务的可能有多个提供者
	  ②当开始系统主动调用该服务的时候，拿到刚才建立的连接的集合，根据某个方法，是随意还是轮询，获取到其中的一个连接，发送方法入参，等待响应
	  ③当注册中心发送某个服务的调用的负载策略发生变化过，发送信息给consumer，consumer需要做相应的变更
	4）Monitor监控者
	  简述
	 ①这个与整个系统是没有任何直接的关系的，实现方式也是多样的，
	可以与上面一样建立长连接，接收每个角色统计的信息，然后展示给用户，
	可以使用MQ,使用消息队列，每个角色把自己统计的信息放到队列中，Monitor去消费这些信息，这样做的好处就是解耦，如果monitor宕了，不影响服务
3、当前的PRC架构:
	Dubbo、springCloud、zookpeer、Apache Thrift、netty
参考地址：
	阿里巴巴dubbo：https://github.com/alibaba/dubbo
	一起学RPC:https://blog.csdn.net/linuu/article/list/2?t=1
	zookper：
	Apache Thrift：https://www.cnblogs.com/duanxz/p/5514190.html
	
模块介绍：
	rpc-common: 存放一些比较公用的工具类，例如反射工具类，logger工具类，公用的Entity,自定义的异常
	
	rpc-remoting: 一个RPC框架，是离不开对网络的支持的，rpc是使用Netty4来支持网络数据传输的，protostuff做序列化工具，这个模块，用来完成网络模块的功能的
	
	rpc-registry：注册中心抽象模块，定义注册中心一些基本的功能，比如接收提供者的提供的服务信息，接收订阅者的某个服务订阅请求，且返回订阅结果等等，简而言之，这个模块主要用于定义注册中心的接口
	
	rpc-registry-default:注册中心基于内存的实现，因为注册中心的实现方式有很多种，基于java内存的，基于zookeeper的，基于consul的，所以才会有了rpc-registry这个抽象模块，才会有了rpc-registry-default这个基于java内存实现的默认模块，本系列目前只完成对java内存的实现
	
	rpc-client: 消费端和提供者端的所有逻辑代码在此模块实现，也就是说如果某个业务逻辑项目需要有RPC的功能的话，只需要maven引入此模块的依赖就可以了，当然此模块也会依赖common和remoting模块，因为这是基础模块嘛
	
	rpc-monitor： 顾名思义就知道这是监控模块，用来统计一些调用信息，做一些数据统计和反馈
	
	rpc-spring-support: 完成rpc对spring的基本支持
	
	rpc-console：提供一个web端的管理页面

