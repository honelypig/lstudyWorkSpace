Java作用域
final、static、native、等特殊关键字的使用
Java按值传递的过程
重构和重载
抽象类和接口
Java连接数据库的过程

JVM内存管理和存储机制
http://blog.csdn.net/lengyuhong/article/details/5953544
JVM垃圾回收机制，垃圾回收算法
http://jbutton.iteye.com/blog/1569746
JVM加载类过程
http://www.cnblogs.com/sunada2005/p/3577799.html
JVM内存调优
http://www.cnblogs.com/jackyrong/archive/2010/01/21/1653163.html
http://blog.csdn.net/cutesource/article/details/5907418

动态代理机制
动态代理可以提供对另一个对象的访问，同时隐藏实际对象的具体事实。代理一般会实现它所表示的实际对象的接口。代理可以访问实际对象，但是延迟实现实际对象的部分功能，实际对象实现系统的实际功能，代理对象对客户隐藏了实际对象。客户不知道它是与代理打交道还是与实际对象打交道。动态代理主要包含以下角色：动态代理类（以下简称为代理类）是一个实现在创建类时在运行时指定的接口列表的类，该类具有下面描述的行为。代理接口 是代理类实现的一个接口。代理实例 是代理类的一个实例。每个代理实例都有一个关联的调用处理程序 对象，它可以实现接口 InvocationHandler。通过其中一个代理接口的代理实例上的方法调用将被指派到实例的调用处理程序的 Invoke 方法，并传递代理实例、识别调用方法的java.lang.reflect.Method 对象以及包含参数的 Object 类型的数组。调用处理程序以适当的方式处理编码的方法调用，并且它返回的结果将作为代理实例上方法调用的结果返回。

静态成员、非静态成员
（1）类的静态成员(变量和方法)属于类本身，在类加载的时候就会分配内存，可以通过类名直接去访问；非静态成员（变量和方法）属于类的对象，所以只有在类的对象产生（创建类的实例）时才会分配内存，然后通过类的对象（实例）去访问。
（2）在一个类的静态成员中去访问其非静态成员之所以会出错是因为在类的非静态成员不存在的时候类的静态成员就已经存在了，访问一个内存中不存在的东西当然会出错
