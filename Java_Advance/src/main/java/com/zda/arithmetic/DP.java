package com.zda.arithmetic;

/**
 * 动态规划。当前状态可以由前一个状态得到。全局最优解包含局部最优解
 *
 * 话说有一哥们去森林里玩发现了一堆宝石，他数了数，一共有n个。
 * 但他身上能装宝石的就只有一个背包，背包的容量为C。这哥们把n个宝石排成一排并编上号： 0,1,2,…,n-1。
 * 第i个宝石对应的体积和价值分别为V[i]和W[i] 。
 * 排好后这哥们开始思考： 背包总共也就只能装下体积为C的东西，那我要装下哪些宝石才能让我获得最大的利益呢？
 *
 */
public class DP {
    public static void main(String[] args) {
        int N = 3 ;     // 宝石个数
        int C = 10 ;    // 书包容量
        int V[] = {0,5,3,4} ;       // 每个宝石的体积,这里前面的0是为了后面表示方便，即V[1]表示为第一个宝石的体积，下同
        int W[] = {0,20,10,12} ;    // 每个宝石的价值
        int d[][] = new int [N+1][C+1] ;    // 状态数组

        d[0][C] = 0 ;

        for (int i = 1; i <= N; i++) {//遍历宝石个数，
            System.out.println("*********  i="+ i +"  *********" ) ;
            for (int j= 1; j<=C; j++) {//遍历书包体积
                if ( i > 0 && j>=V[i]) {//当书包能够容下第i个宝石，计算
                    // 状态转移方程
                    d[i][j] = (d[i-1][j] > d[i-1][j-V[i]] + W[i]) ? d[i-1][j] : d[i-1][j-V[i]] + W[i] ;
                    //d[i-1][j]表示在体积为j，不装这块宝石的时候，获得的最大价值；此价值通过 i-1 的状态获得，即最优子结构。
                    //d[i-1][j-V[i]] + W[i]： 表示体积在可以装下第 i 块宝石的时候，装下这块宝石的总价值。（d[i-1][j-V[i]]表示在装下当前宝石的时候，剩余体积的最优子解）
                    //因为书包的体积j是逐渐累加的，j-v[i]就是当书包容量减去第i的体积，就是当书包不放第i个宝石的体积
                    System.out.println("\t---------- j="+j+"  d[i-1][j]="+d[i-1][j]+"   d[i-1][j-V[i]]+ W[i]="+(d[i-1][j-V[i]]+ W[i])+"   ---------") ;
                    // 打印每次保存状态的数组
                    print_array(d) ;
                }
            }
            System.out.println() ;
        }
    }
    // 打印保存数据的二位数组
    public static void print_array(int A[][]){
        System.out.println("=======================================================================") ;
        for (int i= 1;i<A.length ;i++ ) {
            for (int j = 1; j<A[0].length; j++) {
                System.out.print(A[i][j] + "\t") ;
            }
            System.out.println();
        }
        System.out.println("=======================================================================") ;
    }

}
/**
 我们来看打印出来的 i=1 时候的数据，表示只有第一个宝石的情况：
 ---------- j=5  d[i-1][j]=0   d[i-1][j-V[i]]+ W[i]=20   ---------
 =======================================================================
 0	0	0	0	20	0	0	0	0	0
 0	0	0	0	0	0	0	0	0	0
 0	0	0	0	0	0	0	0	0	0
 =======================================================================
 ---------- j=6  d[i-1][j]=0   d[i-1][j-V[i]]+ W[i]=20   ---------
 =======================================================================
 0	0	0	0	20	20	0	0	0	0
 0	0	0	0	0	0	0	0	0	0
 0	0	0	0	0	0	0	0	0	0
 =======================================================================
 ---------- j=7  d[i-1][j]=0   d[i-1][j-V[i]]+ W[i]=20   ---------
 =======================================================================
 0	0	0	0	20	20	20	0	0	0
 0	0	0	0	0	0	0	0	0	0
 0	0	0	0	0	0	0	0	0	0
 =======================================================================
 ---------- j=8  d[i-1][j]=0   d[i-1][j-V[i]]+ W[i]=20   ---------
 =======================================================================
 0	0	0	0	20	20	20	20	0	0
 0	0	0	0	0	0	0	0	0	0
 0	0	0	0	0	0	0	0	0	0
 =======================================================================
 ---------- j=9  d[i-1][j]=0   d[i-1][j-V[i]]+ W[i]=20   ---------
 =======================================================================
 0	0	0	0	20	20	20	20	20	0
 0	0	0	0	0	0	0	0	0	0
 0	0	0	0	0	0	0	0	0	0
 =======================================================================
 ---------- j=10  d[i-1][j]=0   d[i-1][j-V[i]]+ W[i]=20   ---------
 =======================================================================
 0	0	0	0	20	20	20	20	20	20
 0	0	0	0	0	0	0	0	0	0
 0	0	0	0	0	0	0	0	0	0
 =======================================================================
 一共三行，表示放三次宝石；10列，表示背包的总体积大小。从程序中可以看到，当求解当前（i=1）最优解的时候，是将当前解的子结构与当前情况做比较（d[i-1][j] 、d[i-1][j-V[i]] + W[i]）。

 d[i-1][j] 表示在体积为j，不装这块宝石的时候，获得的最大价值；此价值通过 i-1 的状态获得，即最优子结构。
 d[i-1][j-V[i]] + W[i]： 表示体积在可以装下第 i 块宝石的时候，装下这块宝石的总价值。（d[i-1][j-V[i]]表示在装下当前宝石的时候，剩余体积的最优子解）

 可以看到这里进行了5次比较，从可以装下当前宝石的体积 j=5 开始。

 *********  i=2  *********
 ---------- j=3  d[i-1][j]=0   d[i-1][j-V[i]]+ W[i]=10   ---------  有2个宝石，体积为3
 =======================================================================
 0	0	0	0	20	20	20	20	20	20
 0	0	10	0	0	0	0	0	0	0
 0	0	0	0	0	0	0	0	0	0
 =======================================================================
 ---------- j=4  d[i-1][j]=0   d[i-1][j-V[i]]+ W[i]=10   --------- 有2个宝石，体积为4
 =======================================================================
 0	0	0	0	20	20	20	20	20	20
 0	0	10	10	0	0	0	0	0	0
 0	0	0	0	0	0	0	0	0	0
 =======================================================================
 ---------- j=5  d[i-1][j]=20   d[i-1][j-V[i]]+ W[i]=10   ---------有2个宝石，体积为5
 =======================================================================
 0	0	0	0	20	20	20	20	20	20
 0	0	10	10	20	0	0	0	0	0
 0	0	0	0	0	0	0	0	0	0
 =======================================================================
 ---------- j=6  d[i-1][j]=20   d[i-1][j-V[i]]+ W[i]=10   ---------有2个宝石，体积为6
 =======================================================================
 0	0	0	0	20	20	20	20	20	20
 0	0	10	10	20	20	0	0	0	0
 0	0	0	0	0	0	0	0	0	0
 =======================================================================
 ---------- j=7  d[i-1][j]=20   d[i-1][j-V[i]]+ W[i]=10   ---------有2个宝石，体积为7
 =======================================================================
 0	0	0	0	20	20	20	20	20	20
 0	0	10	10	20	20	20	0	0	0
 0	0	0	0	0	0	0	0	0	0
 =======================================================================
 ---------- j=8  d[i-1][j]=20   d[i-1][j-V[i]]+ W[i]=30   ---------有2个宝石，体积为8
 =======================================================================
 0	0	0	0	20	20	20	20	20	20
 0	0	10	10	20	20	20	30	0	0
 0	0	0	0	0	0	0	0	0	0
 =======================================================================
 ---------- j=9  d[i-1][j]=20   d[i-1][j-V[i]]+ W[i]=30   ---------有2个宝石，体积为9
 =======================================================================
 0	0	0	0	20	20	20	20	20	20
 0	0	10	10	20	20	20	30	30	0
 0	0	0	0	0	0	0	0	0	0
 =======================================================================
 ---------- j=10  d[i-1][j]=20   d[i-1][j-V[i]]+ W[i]=30   ---------有2个宝石，体积为10
 =======================================================================
 0	0	0	0	20	20	20	20	20	20
 0	0	10	10	20	20	20	30	30	30
 0	0	0	0	0	0	0	0	0	0
 =======================================================================
 我们可以看到，i=2的时候，从 j=3 开始，因为第二块宝石的体积大小为3，如果不放入第一块，只放入第二块的话， j=3是符合要求的。
 第一行就是 i=1 的求解结果，这里作为 i=2 的最优子结构。

 当体积 j<5时，只装入宝石2（V[2] = 3）获取的价值最大；
 而在 j>5 的时候，将 d[i-1][j] 、d[i-1][j-V[i]] + W[i] 进行比较，即不装当前宝石与装入当前宝石的总价值比较，选出一个最好的结果。
 其中 j>=8时，d[i-1][j] = 20（表示不装当前宝石的最高价值，因为此时二者只可装下一个，所以选总价值最高的装），d[i-1][j-V[i]] + W[i]=30（表示装下当前宝石的最高价值，因为此时二者均可装下，所以总价值为两个宝石价值和），此时最优解为30。

 *********  i=3  *********
 ---------- j=4  d[i-1][j]=10   d[i-1][j-V[i]]+ W[i]=12   ---------
 =======================================================================
 0	0	0	0	20	20	20	20	20	20
 0	0	10	10	20	20	20	30	30	30
 0	0	0	12	0	0	0	0	0	0
 =======================================================================
 ---------- j=5  d[i-1][j]=20   d[i-1][j-V[i]]+ W[i]=12   ---------
 =======================================================================
 0	0	0	0	20	20	20	20	20	20
 0	0	10	10	20	20	20	30	30	30
 0	0	0	12	20	0	0	0	0	0
 =======================================================================
 ---------- j=6  d[i-1][j]=20   d[i-1][j-V[i]]+ W[i]=12   ---------
 =======================================================================
 0	0	0	0	20	20	20	20	20	20
 0	0	10	10	20	20	20	30	30	30
 0	0	0	12	20	20	0	0	0	0
 =======================================================================
 ---------- j=7  d[i-1][j]=20   d[i-1][j-V[i]]+ W[i]=22   ---------
 =======================================================================
 0	0	0	0	20	20	20	20	20	20
 0	0	10	10	20	20	20	30	30	30
 0	0	0	12	20	20	22	0	0	0
 =======================================================================
 ---------- j=8  d[i-1][j]=30   d[i-1][j-V[i]]+ W[i]=22   ---------
 =======================================================================
 0	0	0	0	20	20	20	20	20	20
 0	0	10	10	20	20	20	30	30	30
 0	0	0	12	20	20	22	30	0	0
 =======================================================================
 ---------- j=9  d[i-1][j]=30   d[i-1][j-V[i]]+ W[i]=32   ---------
 =======================================================================
 0	0	0	0	20	20	20	20	20	20
 0	0	10	10	20	20	20	30	30	30
 0	0	0	12	20	20	22	30	32	0
 =======================================================================
 ---------- j=10  d[i-1][j]=30   d[i-1][j-V[i]]+ W[i]=32   ---------
 =======================================================================
 0	0	0	0	20	20	20	20	20	20
 0	0	10	10	20	20	20	30	30	30
 0	0	0	12	20	20	22	30	32	32
 =======================================================================


 */
